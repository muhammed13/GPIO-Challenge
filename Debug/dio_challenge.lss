
dio_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002606  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002606  0000267a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023ac  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c82  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000057b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00005932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00005b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00007b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00008c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00009c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <main>
      7a:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__fixsfsi+0x80>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__fixsfsi+0x80>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__fixsfsi+0x8a>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__fixsfsi+0x94>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__fixsfsi+0x80>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__fixsfsi+0x8a>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__fixsfsi+0x94>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__fixsfsi+0x68>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__fixsfsi+0x9c>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__fixsfsi+0x9c>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__fixsfsi+0x9c>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <sevensegments>:
#include "GPIO_REQ7.h"
void sevensegments()
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	ec 97       	sbiw	r28, 0x3c	; 60
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
	sevenSegInit(SEG_0);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 04 12 	call	0x2408	; 0x2408 <sevenSegInit>
	sevenSegInit(SEG_1);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 04 12 	call	0x2408	; 0x2408 <sevenSegInit>

	unsigned char counter1;
	unsigned char counter2=0;
     cb0:	1b ae       	std	Y+59, r1	; 0x3b
	while(1)
	{
		for(counter1=0;counter1<=9;counter1++)
     cb2:	1c ae       	std	Y+60, r1	; 0x3c
     cb4:	ee c1       	rjmp	.+988    	; 0x1092 <sevensegments+0x402>
		{
			for(int i=0;i<280;i++)
     cb6:	1a ae       	std	Y+58, r1	; 0x3a
     cb8:	19 ae       	std	Y+57, r1	; 0x39
     cba:	e1 c1       	rjmp	.+962    	; 0x107e <sevensegments+0x3ee>
			{
				sevenSegWrite(SEG_0, counter1);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	6c ad       	ldd	r22, Y+60	; 0x3c
     cc0:	0e 94 97 12 	call	0x252e	; 0x252e <sevenSegWrite>
				sevenSegEnable(SEG_0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 49 12 	call	0x2492	; 0x2492 <sevenSegEnable>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e4       	ldi	r27, 0x40	; 64
     cd2:	8d ab       	std	Y+53, r24	; 0x35
     cd4:	9e ab       	std	Y+54, r25	; 0x36
     cd6:	af ab       	std	Y+55, r26	; 0x37
     cd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	6d a9       	ldd	r22, Y+53	; 0x35
     cdc:	7e a9       	ldd	r23, Y+54	; 0x36
     cde:	8f a9       	ldd	r24, Y+55	; 0x37
     ce0:	98 ad       	ldd	r25, Y+56	; 0x38
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	4a e7       	ldi	r20, 0x7A	; 122
     ce8:	53 e4       	ldi	r21, 0x43	; 67
     cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	89 ab       	std	Y+49, r24	; 0x31
     cf4:	9a ab       	std	Y+50, r25	; 0x32
     cf6:	ab ab       	std	Y+51, r26	; 0x33
     cf8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cfa:	69 a9       	ldd	r22, Y+49	; 0x31
     cfc:	7a a9       	ldd	r23, Y+50	; 0x32
     cfe:	8b a9       	ldd	r24, Y+51	; 0x33
     d00:	9c a9       	ldd	r25, Y+52	; 0x34
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	2c f4       	brge	.+10     	; 0xd1c <sevensegments+0x8c>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 ab       	std	Y+48, r25	; 0x30
     d18:	8f a7       	std	Y+47, r24	; 0x2f
     d1a:	3f c0       	rjmp	.+126    	; 0xd9a <sevensegments+0x10a>
	else if (__tmp > 65535)
     d1c:	69 a9       	ldd	r22, Y+49	; 0x31
     d1e:	7a a9       	ldd	r23, Y+50	; 0x32
     d20:	8b a9       	ldd	r24, Y+51	; 0x33
     d22:	9c a9       	ldd	r25, Y+52	; 0x34
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	57 e4       	ldi	r21, 0x47	; 71
     d2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d30:	18 16       	cp	r1, r24
     d32:	4c f5       	brge	.+82     	; 0xd86 <sevensegments+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d34:	6d a9       	ldd	r22, Y+53	; 0x35
     d36:	7e a9       	ldd	r23, Y+54	; 0x36
     d38:	8f a9       	ldd	r24, Y+55	; 0x37
     d3a:	98 ad       	ldd	r25, Y+56	; 0x38
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e2       	ldi	r20, 0x20	; 32
     d42:	51 e4       	ldi	r21, 0x41	; 65
     d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	98 ab       	std	Y+48, r25	; 0x30
     d5a:	8f a7       	std	Y+47, r24	; 0x2f
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <sevensegments+0xec>
     d5e:	89 e1       	ldi	r24, 0x19	; 25
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9e a7       	std	Y+46, r25	; 0x2e
     d64:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d66:	8d a5       	ldd	r24, Y+45	; 0x2d
     d68:	9e a5       	ldd	r25, Y+46	; 0x2e
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <sevensegments+0xda>
     d6e:	9e a7       	std	Y+46, r25	; 0x2e
     d70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	8f a5       	ldd	r24, Y+47	; 0x2f
     d74:	98 a9       	ldd	r25, Y+48	; 0x30
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	98 ab       	std	Y+48, r25	; 0x30
     d7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d7e:	98 a9       	ldd	r25, Y+48	; 0x30
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	69 f7       	brne	.-38     	; 0xd5e <sevensegments+0xce>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <sevensegments+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	69 a9       	ldd	r22, Y+49	; 0x31
     d88:	7a a9       	ldd	r23, Y+50	; 0x32
     d8a:	8b a9       	ldd	r24, Y+51	; 0x33
     d8c:	9c a9       	ldd	r25, Y+52	; 0x34
     d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	98 ab       	std	Y+48, r25	; 0x30
     d98:	8f a7       	std	Y+47, r24	; 0x2f
     d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d9c:	98 a9       	ldd	r25, Y+48	; 0x30
     d9e:	9c a7       	std	Y+44, r25	; 0x2c
     da0:	8b a7       	std	Y+43, r24	; 0x2b
     da2:	8b a5       	ldd	r24, Y+43	; 0x2b
     da4:	9c a5       	ldd	r25, Y+44	; 0x2c
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <sevensegments+0x116>
     daa:	9c a7       	std	Y+44, r25	; 0x2c
     dac:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
				sevenSegDisable(SEG_0);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <sevenSegDisable>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e4       	ldi	r27, 0x40	; 64
     dbc:	8f a3       	std	Y+39, r24	; 0x27
     dbe:	98 a7       	std	Y+40, r25	; 0x28
     dc0:	a9 a7       	std	Y+41, r26	; 0x29
     dc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6f a1       	ldd	r22, Y+39	; 0x27
     dc6:	78 a5       	ldd	r23, Y+40	; 0x28
     dc8:	89 a5       	ldd	r24, Y+41	; 0x29
     dca:	9a a5       	ldd	r25, Y+42	; 0x2a
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	53 e4       	ldi	r21, 0x43	; 67
     dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8b a3       	std	Y+35, r24	; 0x23
     dde:	9c a3       	std	Y+36, r25	; 0x24
     de0:	ad a3       	std	Y+37, r26	; 0x25
     de2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     de4:	6b a1       	ldd	r22, Y+35	; 0x23
     de6:	7c a1       	ldd	r23, Y+36	; 0x24
     de8:	8d a1       	ldd	r24, Y+37	; 0x25
     dea:	9e a1       	ldd	r25, Y+38	; 0x26
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <sevensegments+0x176>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9a a3       	std	Y+34, r25	; 0x22
     e02:	89 a3       	std	Y+33, r24	; 0x21
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <sevensegments+0x1f4>
	else if (__tmp > 65535)
     e06:	6b a1       	ldd	r22, Y+35	; 0x23
     e08:	7c a1       	ldd	r23, Y+36	; 0x24
     e0a:	8d a1       	ldd	r24, Y+37	; 0x25
     e0c:	9e a1       	ldd	r25, Y+38	; 0x26
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <sevensegments+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6f a1       	ldd	r22, Y+39	; 0x27
     e20:	78 a5       	ldd	r23, Y+40	; 0x28
     e22:	89 a5       	ldd	r24, Y+41	; 0x29
     e24:	9a a5       	ldd	r25, Y+42	; 0x2a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9a a3       	std	Y+34, r25	; 0x22
     e44:	89 a3       	std	Y+33, r24	; 0x21
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <sevensegments+0x1d6>
     e48:	89 e1       	ldi	r24, 0x19	; 25
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	98 a3       	std	Y+32, r25	; 0x20
     e4e:	8f 8f       	std	Y+31, r24	; 0x1f
     e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e52:	98 a1       	ldd	r25, Y+32	; 0x20
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <sevensegments+0x1c4>
     e58:	98 a3       	std	Y+32, r25	; 0x20
     e5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	89 a1       	ldd	r24, Y+33	; 0x21
     e5e:	9a a1       	ldd	r25, Y+34	; 0x22
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9a a3       	std	Y+34, r25	; 0x22
     e64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	89 a1       	ldd	r24, Y+33	; 0x21
     e68:	9a a1       	ldd	r25, Y+34	; 0x22
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <sevensegments+0x1b8>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <sevensegments+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6b a1       	ldd	r22, Y+35	; 0x23
     e72:	7c a1       	ldd	r23, Y+36	; 0x24
     e74:	8d a1       	ldd	r24, Y+37	; 0x25
     e76:	9e a1       	ldd	r25, Y+38	; 0x26
     e78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9a a3       	std	Y+34, r25	; 0x22
     e82:	89 a3       	std	Y+33, r24	; 0x21
     e84:	89 a1       	ldd	r24, Y+33	; 0x21
     e86:	9a a1       	ldd	r25, Y+34	; 0x22
     e88:	9e 8f       	std	Y+30, r25	; 0x1e
     e8a:	8d 8f       	std	Y+29, r24	; 0x1d
     e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <sevensegments+0x200>
     e94:	9e 8f       	std	Y+30, r25	; 0x1e
     e96:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);


				sevenSegWrite(SEG_1, counter2);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	6b ad       	ldd	r22, Y+59	; 0x3b
     e9c:	0e 94 97 12 	call	0x252e	; 0x252e <sevenSegWrite>
				sevenSegEnable(SEG_1);
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 49 12 	call	0x2492	; 0x2492 <sevenSegEnable>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e4       	ldi	r27, 0x40	; 64
     eae:	89 8f       	std	Y+25, r24	; 0x19
     eb0:	9a 8f       	std	Y+26, r25	; 0x1a
     eb2:	ab 8f       	std	Y+27, r26	; 0x1b
     eb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb6:	69 8d       	ldd	r22, Y+25	; 0x19
     eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	4a e7       	ldi	r20, 0x7A	; 122
     ec4:	53 e4       	ldi	r21, 0x43	; 67
     ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8d 8b       	std	Y+21, r24	; 0x15
     ed0:	9e 8b       	std	Y+22, r25	; 0x16
     ed2:	af 8b       	std	Y+23, r26	; 0x17
     ed4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ed6:	6d 89       	ldd	r22, Y+21	; 0x15
     ed8:	7e 89       	ldd	r23, Y+22	; 0x16
     eda:	8f 89       	ldd	r24, Y+23	; 0x17
     edc:	98 8d       	ldd	r25, Y+24	; 0x18
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     eea:	88 23       	and	r24, r24
     eec:	2c f4       	brge	.+10     	; 0xef8 <sevensegments+0x268>
		__ticks = 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c 8b       	std	Y+20, r25	; 0x14
     ef4:	8b 8b       	std	Y+19, r24	; 0x13
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <sevensegments+0x2e6>
	else if (__tmp > 65535)
     ef8:	6d 89       	ldd	r22, Y+21	; 0x15
     efa:	7e 89       	ldd	r23, Y+22	; 0x16
     efc:	8f 89       	ldd	r24, Y+23	; 0x17
     efe:	98 8d       	ldd	r25, Y+24	; 0x18
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	4f e7       	ldi	r20, 0x7F	; 127
     f06:	57 e4       	ldi	r21, 0x47	; 71
     f08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	4c f5       	brge	.+82     	; 0xf62 <sevensegments+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	69 8d       	ldd	r22, Y+25	; 0x19
     f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e2       	ldi	r20, 0x20	; 32
     f1e:	51 e4       	ldi	r21, 0x41	; 65
     f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9c 8b       	std	Y+20, r25	; 0x14
     f36:	8b 8b       	std	Y+19, r24	; 0x13
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <sevensegments+0x2c8>
     f3a:	89 e1       	ldi	r24, 0x19	; 25
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9a 8b       	std	Y+18, r25	; 0x12
     f40:	89 8b       	std	Y+17, r24	; 0x11
     f42:	89 89       	ldd	r24, Y+17	; 0x11
     f44:	9a 89       	ldd	r25, Y+18	; 0x12
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <sevensegments+0x2b6>
     f4a:	9a 8b       	std	Y+18, r25	; 0x12
     f4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4e:	8b 89       	ldd	r24, Y+19	; 0x13
     f50:	9c 89       	ldd	r25, Y+20	; 0x14
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	9c 8b       	std	Y+20, r25	; 0x14
     f56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f58:	8b 89       	ldd	r24, Y+19	; 0x13
     f5a:	9c 89       	ldd	r25, Y+20	; 0x14
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	69 f7       	brne	.-38     	; 0xf3a <sevensegments+0x2aa>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <sevensegments+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f62:	6d 89       	ldd	r22, Y+21	; 0x15
     f64:	7e 89       	ldd	r23, Y+22	; 0x16
     f66:	8f 89       	ldd	r24, Y+23	; 0x17
     f68:	98 8d       	ldd	r25, Y+24	; 0x18
     f6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9c 8b       	std	Y+20, r25	; 0x14
     f74:	8b 8b       	std	Y+19, r24	; 0x13
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	9c 89       	ldd	r25, Y+20	; 0x14
     f7a:	98 8b       	std	Y+16, r25	; 0x10
     f7c:	8f 87       	std	Y+15, r24	; 0x0f
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	98 89       	ldd	r25, Y+16	; 0x10
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <sevensegments+0x2f2>
     f86:	98 8b       	std	Y+16, r25	; 0x10
     f88:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
				sevenSegDisable(SEG_1);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <sevenSegDisable>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b0 e4       	ldi	r27, 0x40	; 64
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	9c 87       	std	Y+12, r25	; 0x0c
     f9c:	ad 87       	std	Y+13, r26	; 0x0d
     f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a e7       	ldi	r20, 0x7A	; 122
     fae:	53 e4       	ldi	r21, 0x43	; 67
     fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	98 87       	std	Y+8, r25	; 0x08
     fbc:	a9 87       	std	Y+9, r26	; 0x09
     fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <sevensegments+0x352>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <sevensegments+0x3d0>
	else if (__tmp > 65535)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <sevensegments+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <sevensegments+0x3b2>
    1024:	89 e1       	ldi	r24, 0x19	; 25
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <sevensegments+0x3a0>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <sevensegments+0x394>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <sevensegments+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <sevensegments+0x3dc>
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
	unsigned char counter2=0;
	while(1)
	{
		for(counter1=0;counter1<=9;counter1++)
		{
			for(int i=0;i<280;i++)
    1074:	89 ad       	ldd	r24, Y+57	; 0x39
    1076:	9a ad       	ldd	r25, Y+58	; 0x3a
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	9a af       	std	Y+58, r25	; 0x3a
    107c:	89 af       	std	Y+57, r24	; 0x39
    107e:	89 ad       	ldd	r24, Y+57	; 0x39
    1080:	9a ad       	ldd	r25, Y+58	; 0x3a
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	88 31       	cpi	r24, 0x18	; 24
    1086:	92 07       	cpc	r25, r18
    1088:	0c f4       	brge	.+2      	; 0x108c <sevensegments+0x3fc>
    108a:	18 ce       	rjmp	.-976    	; 0xcbc <sevensegments+0x2c>

	unsigned char counter1;
	unsigned char counter2=0;
	while(1)
	{
		for(counter1=0;counter1<=9;counter1++)
    108c:	8c ad       	ldd	r24, Y+60	; 0x3c
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	8c af       	std	Y+60, r24	; 0x3c
    1092:	8c ad       	ldd	r24, Y+60	; 0x3c
    1094:	8a 30       	cpi	r24, 0x0A	; 10
    1096:	08 f4       	brcc	.+2      	; 0x109a <sevensegments+0x40a>
    1098:	0e ce       	rjmp	.-996    	; 0xcb6 <sevensegments+0x26>
				sevenSegDisable(SEG_1);
				_delay_ms(2);

			}
		}
		counter2++;
    109a:	8b ad       	ldd	r24, Y+59	; 0x3b
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8b af       	std	Y+59, r24	; 0x3b
		if(counter2==10)
    10a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a2:	8a 30       	cpi	r24, 0x0A	; 10
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <sevensegments+0x418>
    10a6:	05 ce       	rjmp	.-1014   	; 0xcb2 <sevensegments+0x22>
		{
			counter2=0;
    10a8:	1b ae       	std	Y+59, r1	; 0x3b
    10aa:	03 ce       	rjmp	.-1018   	; 0xcb2 <sevensegments+0x22>

000010ac <button_led>:
#include "GPIO_REQ8.h"

void button_led(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	ab 97       	sbiw	r28, 0x2b	; 43
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
	unsigned char count=START+1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8b a7       	std	Y+43, r24	; 0x2b
	Led_Init(LED_1);
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Led_Init>
	pushButtonInit(BTN_1);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <pushButtonInit>
	while(1)
	{
		if(pushButtonGetStatus(BTN_1))
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <pushButtonGetStatus>
    10d6:	88 23       	and	r24, r24
    10d8:	d9 f3       	breq	.-10     	; 0x10d0 <button_led+0x24>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a8 e4       	ldi	r26, 0x48	; 72
    10e0:	b3 e4       	ldi	r27, 0x43	; 67
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <button_led+0x80>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <button_led+0xfe>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <button_led+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <button_led+0xe0>
    116e:	89 e1       	ldi	r24, 0x19	; 25
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <button_led+0xce>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <button_led+0xc2>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <button_led+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <button_led+0x10a>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(200);
			if(pushButtonGetStatus(BTN_1))
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <pushButtonGetStatus>
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <button_led+0x11e>
    11c8:	8f c0       	rjmp	.+286    	; 0x12e8 <button_led+0x23c>
			{
				count++;
    11ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	8b a7       	std	Y+43, r24	; 0x2b
				Led_On(LED_1);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Led_On>
				_delay_ms(ONE_SEC*(count));
    11d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	88 ee       	ldi	r24, 0xE8	; 232
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	ac 01       	movw	r20, r24
    11e2:	24 9f       	mul	r18, r20
    11e4:	c0 01       	movw	r24, r0
    11e6:	25 9f       	mul	r18, r21
    11e8:	90 0d       	add	r25, r0
    11ea:	34 9f       	mul	r19, r20
    11ec:	90 0d       	add	r25, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	aa 27       	eor	r26, r26
    11f2:	97 fd       	sbrc	r25, 7
    11f4:	a0 95       	com	r26
    11f6:	ba 2f       	mov	r27, r26
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	89 8f       	std	Y+25, r24	; 0x19
    1206:	9a 8f       	std	Y+26, r25	; 0x1a
    1208:	ab 8f       	std	Y+27, r26	; 0x1b
    120a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	69 8d       	ldd	r22, Y+25	; 0x19
    120e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a e7       	ldi	r20, 0x7A	; 122
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8d 8b       	std	Y+21, r24	; 0x15
    1226:	9e 8b       	std	Y+22, r25	; 0x16
    1228:	af 8b       	std	Y+23, r26	; 0x17
    122a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    122c:	6d 89       	ldd	r22, Y+21	; 0x15
    122e:	7e 89       	ldd	r23, Y+22	; 0x16
    1230:	8f 89       	ldd	r24, Y+23	; 0x17
    1232:	98 8d       	ldd	r25, Y+24	; 0x18
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <button_led+0x1a2>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	8b 8b       	std	Y+19, r24	; 0x13
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <button_led+0x220>
	else if (__tmp > 65535)
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <button_led+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	69 8d       	ldd	r22, Y+25	; 0x19
    1268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9c 8b       	std	Y+20, r25	; 0x14
    128c:	8b 8b       	std	Y+19, r24	; 0x13
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <button_led+0x202>
    1290:	89 e1       	ldi	r24, 0x19	; 25
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9a 8b       	std	Y+18, r25	; 0x12
    1296:	89 8b       	std	Y+17, r24	; 0x11
    1298:	89 89       	ldd	r24, Y+17	; 0x11
    129a:	9a 89       	ldd	r25, Y+18	; 0x12
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <button_led+0x1f0>
    12a0:	9a 8b       	std	Y+18, r25	; 0x12
    12a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9c 8b       	std	Y+20, r25	; 0x14
    12ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8b 89       	ldd	r24, Y+19	; 0x13
    12b0:	9c 89       	ldd	r25, Y+20	; 0x14
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <button_led+0x1e4>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <button_led+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ba:	7e 89       	ldd	r23, Y+22	; 0x16
    12bc:	8f 89       	ldd	r24, Y+23	; 0x17
    12be:	98 8d       	ldd	r25, Y+24	; 0x18
    12c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9c 8b       	std	Y+20, r25	; 0x14
    12ca:	8b 8b       	std	Y+19, r24	; 0x13
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	98 8b       	std	Y+16, r25	; 0x10
    12d2:	8f 87       	std	Y+15, r24	; 0x0f
    12d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d6:	98 89       	ldd	r25, Y+16	; 0x10
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <button_led+0x22c>
    12dc:	98 8b       	std	Y+16, r25	; 0x10
    12de:	8f 87       	std	Y+15, r24	; 0x0f
				Led_Off(LED_1);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Led_Off>
    12e6:	f4 ce       	rjmp	.-536    	; 0x10d0 <button_led+0x24>
			}
			else
			{
				Led_On(LED_1);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Led_On>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	aa e7       	ldi	r26, 0x7A	; 122
    12f4:	b4 e4       	ldi	r27, 0x44	; 68
    12f6:	8b 87       	std	Y+11, r24	; 0x0b
    12f8:	9c 87       	std	Y+12, r25	; 0x0c
    12fa:	ad 87       	std	Y+13, r26	; 0x0d
    12fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1300:	7c 85       	ldd	r23, Y+12	; 0x0c
    1302:	8d 85       	ldd	r24, Y+13	; 0x0d
    1304:	9e 85       	ldd	r25, Y+14	; 0x0e
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a e7       	ldi	r20, 0x7A	; 122
    130c:	53 e4       	ldi	r21, 0x43	; 67
    130e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	8f 83       	std	Y+7, r24	; 0x07
    1318:	98 87       	std	Y+8, r25	; 0x08
    131a:	a9 87       	std	Y+9, r26	; 0x09
    131c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <button_led+0x294>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	3f c0       	rjmp	.+126    	; 0x13be <button_led+0x312>
	else if (__tmp > 65535)
    1340:	6f 81       	ldd	r22, Y+7	; 0x07
    1342:	78 85       	ldd	r23, Y+8	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <button_led+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6b 85       	ldd	r22, Y+11	; 0x0b
    135a:	7c 85       	ldd	r23, Y+12	; 0x0c
    135c:	8d 85       	ldd	r24, Y+13	; 0x0d
    135e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <button_led+0x2f4>
    1382:	89 e1       	ldi	r24, 0x19	; 25
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <button_led+0x2e2>
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <button_led+0x2d6>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <button_led+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <button_led+0x31e>
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(ONE_SEC);
				Led_Off(LED_1);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Led_Off>
				count=START+1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	8b a7       	std	Y+43, r24	; 0x2b
    13dc:	79 ce       	rjmp	.-782    	; 0x10d0 <button_led+0x24>

000013de <trafficlight>:
#include "GPIO_REQ9.h"

void trafficlight()
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	ae 97       	sbiw	r28, 0x2e	; 46
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
	Led_Init(LED_1);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Led_Init>
	Led_Init(LED_2);
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Led_Init>
	Led_Init(LED_3);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Led_Init>
	int state=GO;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c a7       	std	Y+44, r25	; 0x2c
    140a:	8b a7       	std	Y+43, r24	; 0x2b
	while(1)
	{
		switch(state)
    140c:	8b a5       	ldd	r24, Y+43	; 0x2b
    140e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1410:	9e a7       	std	Y+46, r25	; 0x2e
    1412:	8d a7       	std	Y+45, r24	; 0x2d
    1414:	8d a5       	ldd	r24, Y+45	; 0x2d
    1416:	9e a5       	ldd	r25, Y+46	; 0x2e
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <trafficlight+0x42>
    141e:	88 c0       	rjmp	.+272    	; 0x1530 <trafficlight+0x152>
    1420:	8d a5       	ldd	r24, Y+45	; 0x2d
    1422:	9e a5       	ldd	r25, Y+46	; 0x2e
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <trafficlight+0x4e>
    142a:	ff c0       	rjmp	.+510    	; 0x162a <trafficlight+0x24c>
    142c:	8d a5       	ldd	r24, Y+45	; 0x2d
    142e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	59 f7       	brne	.-42     	; 0x140c <trafficlight+0x2e>
		{
			case GO:
				Led_On(LED_1);
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Led_On>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa e7       	ldi	r26, 0x7A	; 122
    1442:	b4 e4       	ldi	r27, 0x44	; 68
    1444:	8f a3       	std	Y+39, r24	; 0x27
    1446:	98 a7       	std	Y+40, r25	; 0x28
    1448:	a9 a7       	std	Y+41, r26	; 0x29
    144a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	6f a1       	ldd	r22, Y+39	; 0x27
    144e:	78 a5       	ldd	r23, Y+40	; 0x28
    1450:	89 a5       	ldd	r24, Y+41	; 0x29
    1452:	9a a5       	ldd	r25, Y+42	; 0x2a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	53 e4       	ldi	r21, 0x43	; 67
    145c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8b a3       	std	Y+35, r24	; 0x23
    1466:	9c a3       	std	Y+36, r25	; 0x24
    1468:	ad a3       	std	Y+37, r26	; 0x25
    146a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    146c:	6b a1       	ldd	r22, Y+35	; 0x23
    146e:	7c a1       	ldd	r23, Y+36	; 0x24
    1470:	8d a1       	ldd	r24, Y+37	; 0x25
    1472:	9e a1       	ldd	r25, Y+38	; 0x26
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <trafficlight+0xb0>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	3f c0       	rjmp	.+126    	; 0x150c <trafficlight+0x12e>
	else if (__tmp > 65535)
    148e:	6b a1       	ldd	r22, Y+35	; 0x23
    1490:	7c a1       	ldd	r23, Y+36	; 0x24
    1492:	8d a1       	ldd	r24, Y+37	; 0x25
    1494:	9e a1       	ldd	r25, Y+38	; 0x26
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <trafficlight+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	6f a1       	ldd	r22, Y+39	; 0x27
    14a8:	78 a5       	ldd	r23, Y+40	; 0x28
    14aa:	89 a5       	ldd	r24, Y+41	; 0x29
    14ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9a a3       	std	Y+34, r25	; 0x22
    14cc:	89 a3       	std	Y+33, r24	; 0x21
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <trafficlight+0x110>
    14d0:	89 e1       	ldi	r24, 0x19	; 25
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	98 a3       	std	Y+32, r25	; 0x20
    14d6:	8f 8f       	std	Y+31, r24	; 0x1f
    14d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14da:	98 a1       	ldd	r25, Y+32	; 0x20
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <trafficlight+0xfe>
    14e0:	98 a3       	std	Y+32, r25	; 0x20
    14e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9a a3       	std	Y+34, r25	; 0x22
    14ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	89 a1       	ldd	r24, Y+33	; 0x21
    14f0:	9a a1       	ldd	r25, Y+34	; 0x22
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <trafficlight+0xf2>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <trafficlight+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6b a1       	ldd	r22, Y+35	; 0x23
    14fa:	7c a1       	ldd	r23, Y+36	; 0x24
    14fc:	8d a1       	ldd	r24, Y+37	; 0x25
    14fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
    150c:	89 a1       	ldd	r24, Y+33	; 0x21
    150e:	9a a1       	ldd	r25, Y+34	; 0x22
    1510:	9e 8f       	std	Y+30, r25	; 0x1e
    1512:	8d 8f       	std	Y+29, r24	; 0x1d
    1514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <trafficlight+0x13a>
    151c:	9e 8f       	std	Y+30, r25	; 0x1e
    151e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(ONE_SEC);
				Led_Off(LED_1);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Led_Off>
				state=3;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9c a7       	std	Y+44, r25	; 0x2c
    152c:	8b a7       	std	Y+43, r24	; 0x2b
    152e:	6e cf       	rjmp	.-292    	; 0x140c <trafficlight+0x2e>
				break;
			case READY:
				Led_On(LED_2);
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Led_On>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	aa e7       	ldi	r26, 0x7A	; 122
    153c:	b4 e4       	ldi	r27, 0x44	; 68
    153e:	89 8f       	std	Y+25, r24	; 0x19
    1540:	9a 8f       	std	Y+26, r25	; 0x1a
    1542:	ab 8f       	std	Y+27, r26	; 0x1b
    1544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	69 8d       	ldd	r22, Y+25	; 0x19
    1548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a e7       	ldi	r20, 0x7A	; 122
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8d 8b       	std	Y+21, r24	; 0x15
    1560:	9e 8b       	std	Y+22, r25	; 0x16
    1562:	af 8b       	std	Y+23, r26	; 0x17
    1564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1566:	6d 89       	ldd	r22, Y+21	; 0x15
    1568:	7e 89       	ldd	r23, Y+22	; 0x16
    156a:	8f 89       	ldd	r24, Y+23	; 0x17
    156c:	98 8d       	ldd	r25, Y+24	; 0x18
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <trafficlight+0x1aa>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <trafficlight+0x228>
	else if (__tmp > 65535)
    1588:	6d 89       	ldd	r22, Y+21	; 0x15
    158a:	7e 89       	ldd	r23, Y+22	; 0x16
    158c:	8f 89       	ldd	r24, Y+23	; 0x17
    158e:	98 8d       	ldd	r25, Y+24	; 0x18
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <trafficlight+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	69 8d       	ldd	r22, Y+25	; 0x19
    15a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <trafficlight+0x20a>
    15ca:	89 e1       	ldi	r24, 0x19	; 25
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9a 8b       	std	Y+18, r25	; 0x12
    15d0:	89 8b       	std	Y+17, r24	; 0x11
    15d2:	89 89       	ldd	r24, Y+17	; 0x11
    15d4:	9a 89       	ldd	r25, Y+18	; 0x12
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <trafficlight+0x1f8>
    15da:	9a 8b       	std	Y+18, r25	; 0x12
    15dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9c 8b       	std	Y+20, r25	; 0x14
    15e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ea:	9c 89       	ldd	r25, Y+20	; 0x14
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <trafficlight+0x1ec>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <trafficlight+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	6d 89       	ldd	r22, Y+21	; 0x15
    15f4:	7e 89       	ldd	r23, Y+22	; 0x16
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9c 8b       	std	Y+20, r25	; 0x14
    1604:	8b 8b       	std	Y+19, r24	; 0x13
    1606:	8b 89       	ldd	r24, Y+19	; 0x13
    1608:	9c 89       	ldd	r25, Y+20	; 0x14
    160a:	98 8b       	std	Y+16, r25	; 0x10
    160c:	8f 87       	std	Y+15, r24	; 0x0f
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	98 89       	ldd	r25, Y+16	; 0x10
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <trafficlight+0x234>
    1616:	98 8b       	std	Y+16, r25	; 0x10
    1618:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(ONE_SEC);
				Led_Off(LED_2);
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Led_Off>
				state=1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c a7       	std	Y+44, r25	; 0x2c
    1626:	8b a7       	std	Y+43, r24	; 0x2b
    1628:	f1 ce       	rjmp	.-542    	; 0x140c <trafficlight+0x2e>
				break;
			case STOP:
				Led_On(LED_3);
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Led_On>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	aa e7       	ldi	r26, 0x7A	; 122
    1636:	b4 e4       	ldi	r27, 0x44	; 68
    1638:	8b 87       	std	Y+11, r24	; 0x0b
    163a:	9c 87       	std	Y+12, r25	; 0x0c
    163c:	ad 87       	std	Y+13, r26	; 0x0d
    163e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	53 e4       	ldi	r21, 0x43	; 67
    1650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8f 83       	std	Y+7, r24	; 0x07
    165a:	98 87       	std	Y+8, r25	; 0x08
    165c:	a9 87       	std	Y+9, r26	; 0x09
    165e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <trafficlight+0x2a4>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <trafficlight+0x322>
	else if (__tmp > 65535)
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	78 85       	ldd	r23, Y+8	; 0x08
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <trafficlight+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <trafficlight+0x304>
    16c4:	89 e1       	ldi	r24, 0x19	; 25
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <trafficlight+0x2f2>
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <trafficlight+0x2e6>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <trafficlight+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <trafficlight+0x32e>
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(ONE_SEC);
				Led_Off(LED_3);
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Led_Off>
				state=2;
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c a7       	std	Y+44, r25	; 0x2c
    1720:	8b a7       	std	Y+43, r24	; 0x2b
    1722:	74 ce       	rjmp	.-792    	; 0x140c <trafficlight+0x2e>

00001724 <gpioPortDirection>:
#include "gpio.h"
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <gpioPortDirection+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <gpioPortDirection+0x8>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3c 83       	std	Y+4, r19	; 0x04
    173c:	2b 83       	std	Y+3, r18	; 0x03
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	d1 f0       	breq	.+52     	; 0x177c <gpioPortDirection+0x58>
    1748:	2b 81       	ldd	r18, Y+3	; 0x03
    174a:	3c 81       	ldd	r19, Y+4	; 0x04
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <gpioPortDirection+0x38>
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <gpioPortDirection+0x4e>
    175a:	1e c0       	rjmp	.+60     	; 0x1798 <gpioPortDirection+0x74>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	81 f0       	breq	.+32     	; 0x1786 <gpioPortDirection+0x62>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	81 f0       	breq	.+32     	; 0x1790 <gpioPortDirection+0x6c>
    1770:	13 c0       	rjmp	.+38     	; 0x1798 <gpioPortDirection+0x74>
	{
	case 0:
			PORTA_DIR=u8_direction;
    1772:	ea e3       	ldi	r30, 0x3A	; 58
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	80 83       	st	Z, r24
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <gpioPortDirection+0x74>
		break;

	case 1:
			PORTB_DIR=u8_direction;
    177c:	e7 e3       	ldi	r30, 0x37	; 55
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	80 83       	st	Z, r24
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <gpioPortDirection+0x74>
			break;
	case 2:
			PORTC_DIR=u8_direction;
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	80 83       	st	Z, r24
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <gpioPortDirection+0x74>
		break;

	case 3:
			PORTD_DIR=u8_direction;
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	80 83       	st	Z, r24
		break;

	}
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <gpioPortWrite>:


void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <gpioPortWrite+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <gpioPortWrite+0x8>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3c 83       	std	Y+4, r19	; 0x04
    17be:	2b 83       	std	Y+3, r18	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	d1 f0       	breq	.+52     	; 0x17fe <gpioPortWrite+0x58>
    17ca:	2b 81       	ldd	r18, Y+3	; 0x03
    17cc:	3c 81       	ldd	r19, Y+4	; 0x04
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <gpioPortWrite+0x38>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <gpioPortWrite+0x4e>
    17dc:	1e c0       	rjmp	.+60     	; 0x181a <gpioPortWrite+0x74>
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <gpioPortWrite+0x62>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	81 f0       	breq	.+32     	; 0x1812 <gpioPortWrite+0x6c>
    17f2:	13 c0       	rjmp	.+38     	; 0x181a <gpioPortWrite+0x74>
	{
	case 0:
			PORTA_DATA=u8_value;
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	80 83       	st	Z, r24
    17fc:	0e c0       	rjmp	.+28     	; 0x181a <gpioPortWrite+0x74>

		break;

	case 1:
			PORTB_DATA=u8_value;
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	80 83       	st	Z, r24
    1806:	09 c0       	rjmp	.+18     	; 0x181a <gpioPortWrite+0x74>
		break;

	case 2:
			PORTC_DATA=u8_value;
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	80 83       	st	Z, r24
    1810:	04 c0       	rjmp	.+8      	; 0x181a <gpioPortWrite+0x74>
		break;

	case 3:
			PORTD_DATA=u8_value;
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	80 83       	st	Z, r24
		break;

	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <gpioPortToggle+0x6>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_port)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3b 83       	std	Y+3, r19	; 0x03
    183e:	2a 83       	std	Y+2, r18	; 0x02
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	e9 f0       	breq	.+58     	; 0x1884 <gpioPortToggle+0x5c>
    184a:	2a 81       	ldd	r18, Y+2	; 0x02
    184c:	3b 81       	ldd	r19, Y+3	; 0x03
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <gpioPortToggle+0x36>
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <gpioPortToggle+0x4c>
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <gpioPortToggle+0x8a>
    185e:	2a 81       	ldd	r18, Y+2	; 0x02
    1860:	3b 81       	ldd	r19, Y+3	; 0x03
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	b1 f0       	breq	.+44     	; 0x1894 <gpioPortToggle+0x6c>
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	c9 f0       	breq	.+50     	; 0x18a4 <gpioPortToggle+0x7c>
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <gpioPortToggle+0x8a>
	{
	case 0:
		PORTA_DATA ^= HIGH;
    1874:	ab e3       	ldi	r26, 0x3B	; 59
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e3       	ldi	r30, 0x3B	; 59
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 95       	com	r24
    1880:	8c 93       	st	X, r24
    1882:	17 c0       	rjmp	.+46     	; 0x18b2 <gpioPortToggle+0x8a>
		break;

	case 1:
		PORTB_DATA ^= HIGH;
    1884:	a8 e3       	ldi	r26, 0x38	; 56
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 95       	com	r24
    1890:	8c 93       	st	X, r24
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <gpioPortToggle+0x8a>
		break;

	case 2:
		PORTC_DATA ^= HIGH;
    1894:	a5 e3       	ldi	r26, 0x35	; 53
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e5 e3       	ldi	r30, 0x35	; 53
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 95       	com	r24
    18a0:	8c 93       	st	X, r24
    18a2:	07 c0       	rjmp	.+14     	; 0x18b2 <gpioPortToggle+0x8a>
		break;

	case 3:
		PORTD_DATA ^= HIGH;
    18a4:	a2 e3       	ldi	r26, 0x32	; 50
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e2 e3       	ldi	r30, 0x32	; 50
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 95       	com	r24
    18b0:	8c 93       	st	X, r24
		break;

	}
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <gpioPortRead+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <gpioPortRead+0x8>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	switch(u8_port)
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3c 83       	std	Y+4, r19	; 0x04
    18d4:	2b 83       	std	Y+3, r18	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	d1 f0       	breq	.+52     	; 0x1914 <gpioPortRead+0x56>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <gpioPortRead+0x36>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	61 f0       	breq	.+24     	; 0x190a <gpioPortRead+0x4c>
    18f2:	1e c0       	rjmp	.+60     	; 0x1930 <gpioPortRead+0x72>
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	81 f0       	breq	.+32     	; 0x191e <gpioPortRead+0x60>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	81 f0       	breq	.+32     	; 0x1928 <gpioPortRead+0x6a>
    1908:	13 c0       	rjmp	.+38     	; 0x1930 <gpioPortRead+0x72>
	{
	case 0:
		data=PORTA_PIN;
    190a:	e9 e3       	ldi	r30, 0x39	; 57
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <gpioPortRead+0x72>
		break;

	case 1:
		data=PORTB_PIN;
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <gpioPortRead+0x72>
		break;

	case 2:
		data=PORTC_PIN;
    191e:	e3 e3       	ldi	r30, 0x33	; 51
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <gpioPortRead+0x72>
		break;
	case 3:
		data=PORTD_PIN;
    1928:	e0 e3       	ldi	r30, 0x30	; 48
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <gpioPinDirection+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <gpioPinDirection+0x8>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	6a 83       	std	Y+2, r22	; 0x02
    1952:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3d 83       	std	Y+5, r19	; 0x05
    195c:	2c 83       	std	Y+4, r18	; 0x04
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	69 f1       	breq	.+90     	; 0x19c2 <gpioPinDirection+0x82>
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	2c f4       	brge	.+10     	; 0x197c <gpioPinDirection+0x3c>
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f0       	breq	.+26     	; 0x1994 <gpioPinDirection+0x54>
    197a:	67 c0       	rjmp	.+206    	; 0x1a4a <gpioPinDirection+0x10a>
    197c:	2c 81       	ldd	r18, Y+4	; 0x04
    197e:	3d 81       	ldd	r19, Y+5	; 0x05
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	a9 f1       	breq	.+106    	; 0x19f0 <gpioPinDirection+0xb0>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <gpioPinDirection+0x52>
    1990:	46 c0       	rjmp	.+140    	; 0x1a1e <gpioPinDirection+0xde>
    1992:	5b c0       	rjmp	.+182    	; 0x1a4a <gpioPinDirection+0x10a>
	{
	case 0:
		if(u8_direction == INPUT)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	88 23       	and	r24, r24
    1998:	59 f4       	brne	.+22     	; 0x19b0 <gpioPinDirection+0x70>
		{
			PORTA_DIR &= ~(u8_pins);
    199a:	aa e3       	ldi	r26, 0x3A	; 58
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ea e3       	ldi	r30, 0x3A	; 58
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	98 2f       	mov	r25, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 95       	com	r24
    19aa:	89 23       	and	r24, r25
    19ac:	8c 93       	st	X, r24
    19ae:	4d c0       	rjmp	.+154    	; 0x1a4a <gpioPinDirection+0x10a>
		}
		else
		{
			PORTA_DIR |= u8_pins;
    19b0:	aa e3       	ldi	r26, 0x3A	; 58
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	90 81       	ld	r25, Z
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	89 2b       	or	r24, r25
    19be:	8c 93       	st	X, r24
    19c0:	44 c0       	rjmp	.+136    	; 0x1a4a <gpioPinDirection+0x10a>
		}
		break;

	case 1:
		if(u8_direction == INPUT)
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 23       	and	r24, r24
    19c6:	59 f4       	brne	.+22     	; 0x19de <gpioPinDirection+0x9e>
		{
			PORTB_DIR &= ~(u8_pins);
    19c8:	a7 e3       	ldi	r26, 0x37	; 55
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e7 e3       	ldi	r30, 0x37	; 55
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	98 2f       	mov	r25, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 95       	com	r24
    19d8:	89 23       	and	r24, r25
    19da:	8c 93       	st	X, r24
    19dc:	36 c0       	rjmp	.+108    	; 0x1a4a <gpioPinDirection+0x10a>
		}
		else
		{
			PORTB_DIR |= u8_pins;
    19de:	a7 e3       	ldi	r26, 0x37	; 55
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e7 e3       	ldi	r30, 0x37	; 55
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	90 81       	ld	r25, Z
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	89 2b       	or	r24, r25
    19ec:	8c 93       	st	X, r24
    19ee:	2d c0       	rjmp	.+90     	; 0x1a4a <gpioPinDirection+0x10a>
		}
		break;
	case 2:
		if(u8_direction == INPUT)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 23       	and	r24, r24
    19f4:	59 f4       	brne	.+22     	; 0x1a0c <gpioPinDirection+0xcc>
		{
			PORTC_DIR &= ~(u8_pins);
    19f6:	a4 e3       	ldi	r26, 0x34	; 52
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e4 e3       	ldi	r30, 0x34	; 52
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	98 2f       	mov	r25, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 95       	com	r24
    1a06:	89 23       	and	r24, r25
    1a08:	8c 93       	st	X, r24
    1a0a:	1f c0       	rjmp	.+62     	; 0x1a4a <gpioPinDirection+0x10a>
		}
		else
		{
			PORTC_DIR |= u8_pins;
    1a0c:	a4 e3       	ldi	r26, 0x34	; 52
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e4 e3       	ldi	r30, 0x34	; 52
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	90 81       	ld	r25, Z
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	89 2b       	or	r24, r25
    1a1a:	8c 93       	st	X, r24
    1a1c:	16 c0       	rjmp	.+44     	; 0x1a4a <gpioPinDirection+0x10a>
		}
		break;

	case 3:
		if(u8_direction == INPUT)
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	88 23       	and	r24, r24
    1a22:	59 f4       	brne	.+22     	; 0x1a3a <gpioPinDirection+0xfa>
		{
			PORTD_DIR &= ~(u8_pins);
    1a24:	a1 e3       	ldi	r26, 0x31	; 49
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e1 e3       	ldi	r30, 0x31	; 49
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	98 2f       	mov	r25, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 95       	com	r24
    1a34:	89 23       	and	r24, r25
    1a36:	8c 93       	st	X, r24
    1a38:	08 c0       	rjmp	.+16     	; 0x1a4a <gpioPinDirection+0x10a>
		}
		else
		{
			PORTD_DIR |= u8_pins;
    1a3a:	a1 e3       	ldi	r26, 0x31	; 49
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e1 e3       	ldi	r30, 0x31	; 49
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	90 81       	ld	r25, Z
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	89 2b       	or	r24, r25
    1a48:	8c 93       	st	X, r24
		}
		break;

	}
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <gpioPinWrite+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <gpioPinWrite+0x8>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6a 83       	std	Y+2, r22	; 0x02
    1a6c:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3d 83       	std	Y+5, r19	; 0x05
    1a76:	2c 83       	std	Y+4, r18	; 0x04
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	41 f1       	breq	.+80     	; 0x1ad2 <gpioPinWrite+0x78>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <gpioPinWrite+0x3c>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	61 f0       	breq	.+24     	; 0x1aac <gpioPinWrite+0x52>
    1a94:	56 c0       	rjmp	.+172    	; 0x1b42 <gpioPinWrite+0xe8>
    1a96:	2c 81       	ldd	r18, Y+4	; 0x04
    1a98:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	61 f1       	breq	.+88     	; 0x1af8 <gpioPinWrite+0x9e>
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	d1 f1       	breq	.+116    	; 0x1b1e <gpioPinWrite+0xc4>
    1aaa:	4b c0       	rjmp	.+150    	; 0x1b42 <gpioPinWrite+0xe8>
	{
	case 0:
			PORTA_DATA &= ~(u8_pins);
    1aac:	ab e3       	ldi	r26, 0x3B	; 59
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	eb e3       	ldi	r30, 0x3B	; 59
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 95       	com	r24
    1abc:	89 23       	and	r24, r25
    1abe:	8c 93       	st	X, r24
			PORTA_DATA |= u8_value;
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	90 81       	ld	r25, Z
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	89 2b       	or	r24, r25
    1ace:	8c 93       	st	X, r24
    1ad0:	38 c0       	rjmp	.+112    	; 0x1b42 <gpioPinWrite+0xe8>
		break;

	case 1:
			PORTB_DATA &= ~(u8_pins);
    1ad2:	a8 e3       	ldi	r26, 0x38	; 56
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e8 e3       	ldi	r30, 0x38	; 56
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	98 2f       	mov	r25, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 95       	com	r24
    1ae2:	89 23       	and	r24, r25
    1ae4:	8c 93       	st	X, r24
			PORTB_DATA |= u8_value;
    1ae6:	a8 e3       	ldi	r26, 0x38	; 56
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e8 e3       	ldi	r30, 0x38	; 56
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	90 81       	ld	r25, Z
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
    1af6:	25 c0       	rjmp	.+74     	; 0x1b42 <gpioPinWrite+0xe8>
		break;
	case 2:
			PORTC_DATA &= ~(u8_pins);
    1af8:	a5 e3       	ldi	r26, 0x35	; 53
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e5 e3       	ldi	r30, 0x35	; 53
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	98 2f       	mov	r25, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 95       	com	r24
    1b08:	89 23       	and	r24, r25
    1b0a:	8c 93       	st	X, r24
			PORTC_DATA |= u8_value;
    1b0c:	a5 e3       	ldi	r26, 0x35	; 53
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e3       	ldi	r30, 0x35	; 53
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	90 81       	ld	r25, Z
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	89 2b       	or	r24, r25
    1b1a:	8c 93       	st	X, r24
    1b1c:	12 c0       	rjmp	.+36     	; 0x1b42 <gpioPinWrite+0xe8>
		break;

	case 3:
			PORTD_DATA &= ~(u8_pins);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	98 2f       	mov	r25, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	80 95       	com	r24
    1b2e:	89 23       	and	r24, r25
    1b30:	8c 93       	st	X, r24
			PORTD_DATA |= u8_value;
    1b32:	a2 e3       	ldi	r26, 0x32	; 50
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e2 e3       	ldi	r30, 0x32	; 50
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	90 81       	ld	r25, Z
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	89 2b       	or	r24, r25
    1b40:	8c 93       	st	X, r24
		break;

	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <gpioPinToggle+0x6>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <gpioPinToggle+0x8>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	3c 83       	std	Y+4, r19	; 0x04
    1b6a:	2b 83       	std	Y+3, r18	; 0x03
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	f1 f0       	breq	.+60     	; 0x1bb2 <gpioPinToggle+0x60>
    1b76:	2b 81       	ldd	r18, Y+3	; 0x03
    1b78:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <gpioPinToggle+0x38>
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <gpioPinToggle+0x4e>
    1b88:	2e c0       	rjmp	.+92     	; 0x1be6 <gpioPinToggle+0x94>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	c1 f0       	breq	.+48     	; 0x1bc4 <gpioPinToggle+0x72>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	e1 f0       	breq	.+56     	; 0x1bd6 <gpioPinToggle+0x84>
    1b9e:	23 c0       	rjmp	.+70     	; 0x1be6 <gpioPinToggle+0x94>
	{
	case 0:
			PORTA_DATA ^= u8_pins;
    1ba0:	ab e3       	ldi	r26, 0x3B	; 59
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	eb e3       	ldi	r30, 0x3B	; 59
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	90 81       	ld	r25, Z
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	89 27       	eor	r24, r25
    1bae:	8c 93       	st	X, r24
    1bb0:	1a c0       	rjmp	.+52     	; 0x1be6 <gpioPinToggle+0x94>
		break;

	case 1:
			PORTB_DATA ^= (u8_pins);
    1bb2:	a8 e3       	ldi	r26, 0x38	; 56
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e8 e3       	ldi	r30, 0x38	; 56
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	90 81       	ld	r25, Z
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	89 27       	eor	r24, r25
    1bc0:	8c 93       	st	X, r24
    1bc2:	11 c0       	rjmp	.+34     	; 0x1be6 <gpioPinToggle+0x94>
		break;
	case 2:
			PORTC_DATA ^= (u8_pins);
    1bc4:	a5 e3       	ldi	r26, 0x35	; 53
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e3       	ldi	r30, 0x35	; 53
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	90 81       	ld	r25, Z
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	89 27       	eor	r24, r25
    1bd2:	8c 93       	st	X, r24
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <gpioPinToggle+0x94>
		break;

	case 3:
			PORTD_DATA ^= (u8_pins);
    1bd6:	a2 e3       	ldi	r26, 0x32	; 50
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e2 e3       	ldi	r30, 0x32	; 50
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	90 81       	ld	r25, Z
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	89 27       	eor	r24, r25
    1be4:	8c 93       	st	X, r24
		break;

	}
}
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <gpioPinRead+0x6>
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <gpioPinRead+0x8>
    1bfc:	0f 92       	push	r0
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	8a 83       	std	Y+2, r24	; 0x02
    1c04:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t data;
	switch(u8_port)
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	3d 83       	std	Y+5, r19	; 0x05
    1c0e:	2c 83       	std	Y+4, r18	; 0x04
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	e1 f0       	breq	.+56     	; 0x1c52 <gpioPinRead+0x5e>
    1c1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <gpioPinRead+0x3a>
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	61 f0       	breq	.+24     	; 0x1c44 <gpioPinRead+0x50>
    1c2c:	26 c0       	rjmp	.+76     	; 0x1c7a <gpioPinRead+0x86>
    1c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c30:	3d 81       	ldd	r19, Y+5	; 0x05
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	a1 f0       	breq	.+40     	; 0x1c60 <gpioPinRead+0x6c>
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	91 05       	cpc	r25, r1
    1c40:	b1 f0       	breq	.+44     	; 0x1c6e <gpioPinRead+0x7a>
    1c42:	1b c0       	rjmp	.+54     	; 0x1c7a <gpioPinRead+0x86>
	{
	case 0:
		data= (PORTA_PIN & u8_pin);
    1c44:	e9 e3       	ldi	r30, 0x39	; 57
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	90 81       	ld	r25, Z
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	89 23       	and	r24, r25
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <gpioPinRead+0x86>
		break;

	case 1:
		data= (PORTB_PIN & u8_pin);
    1c52:	e6 e3       	ldi	r30, 0x36	; 54
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	90 81       	ld	r25, Z
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	89 23       	and	r24, r25
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <gpioPinRead+0x86>
		break;

	case 2:
		data= (PORTC_PIN & u8_pin);
    1c60:	e3 e3       	ldi	r30, 0x33	; 51
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	90 81       	ld	r25, Z
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	89 23       	and	r24, r25
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <gpioPinRead+0x86>
		break;
	case 3:
		data= (PORTD_PIN & u8_pin);
    1c6e:	e0 e3       	ldi	r30, 0x30	; 48
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	90 81       	ld	r25, Z
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	89 23       	and	r24, r25
    1c78:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <Led_Init>:
#include "led.h"
void Led_Init(En_LedNumber_t en_led_id)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <Led_Init+0x6>
    1c92:	0f 92       	push	r0
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3b 83       	std	Y+3, r19	; 0x03
    1ca2:	2a 83       	std	Y+2, r18	; 0x02
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	01 f1       	breq	.+64     	; 0x1cee <Led_Init+0x62>
    1cae:	2a 81       	ldd	r18, Y+2	; 0x02
    1cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <Led_Init+0x36>
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <Led_Init+0x4c>
    1cc0:	36 c0       	rjmp	.+108    	; 0x1d2e <Led_Init+0xa2>
    1cc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc4:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	e1 f0       	breq	.+56     	; 0x1d04 <Led_Init+0x78>
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	11 f1       	breq	.+68     	; 0x1d1a <Led_Init+0x8e>
    1cd6:	2b c0       	rjmp	.+86     	; 0x1d2e <Led_Init+0xa2>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	4f ef       	ldi	r20, 0xFF	; 255
    1cde:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1cec:	20 c0       	rjmp	.+64     	; 0x1d2e <Led_Init+0xa2>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	4f ef       	ldi	r20, 0xFF	; 255
    1cf4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <Led_Init+0xa2>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	4f ef       	ldi	r20, 0xFF	; 255
    1d0a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	64 e0       	ldi	r22, 0x04	; 4
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <Led_Init+0xa2>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	68 e0       	ldi	r22, 0x08	; 8
    1d1e:	4f ef       	ldi	r20, 0xFF	; 255
    1d20:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	68 e0       	ldi	r22, 0x08	; 8
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;

	}
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <Led_On+0x6>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3b 83       	std	Y+3, r19	; 0x03
    1d50:	2a 83       	std	Y+2, r18	; 0x02
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	9b 81       	ldd	r25, Y+3	; 0x03
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	d9 f0       	breq	.+54     	; 0x1d92 <Led_On+0x58>
    1d5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <Led_On+0x36>
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <Led_On+0x4c>
    1d6e:	22 c0       	rjmp	.+68     	; 0x1db4 <Led_On+0x7a>
    1d70:	2a 81       	ldd	r18, Y+2	; 0x02
    1d72:	3b 81       	ldd	r19, Y+3	; 0x03
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	91 f0       	breq	.+36     	; 0x1d9e <Led_On+0x64>
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	99 f0       	breq	.+38     	; 0x1daa <Led_On+0x70>
    1d84:	17 c0       	rjmp	.+46     	; 0x1db4 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LED_0_BIT);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1d90:	11 c0       	rjmp	.+34     	; 0x1db4 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LED_1_BIT);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	42 e0       	ldi	r20, 0x02	; 2
    1d98:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1d9c:	0b c0       	rjmp	.+22     	; 0x1db4 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LED_2_BIT);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	64 e0       	ldi	r22, 0x04	; 4
    1da2:	44 e0       	ldi	r20, 0x04	; 4
    1da4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LED_3_BIT);
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	68 e0       	ldi	r22, 0x08	; 8
    1dae:	48 e0       	ldi	r20, 0x08	; 8
    1db0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;

	}
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <Led_Off+0x6>
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3b 83       	std	Y+3, r19	; 0x03
    1dd6:	2a 83       	std	Y+2, r18	; 0x02
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	d9 f0       	breq	.+54     	; 0x1e18 <Led_Off+0x58>
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <Led_Off+0x36>
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <Led_Off+0x4c>
    1df4:	22 c0       	rjmp	.+68     	; 0x1e3a <Led_Off+0x7a>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	91 f0       	breq	.+36     	; 0x1e24 <Led_Off+0x64>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	99 f0       	breq	.+38     	; 0x1e30 <Led_Off+0x70>
    1e0a:	17 c0       	rjmp	.+46     	; 0x1e3a <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	62 e0       	ldi	r22, 0x02	; 2
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1e22:	0b c0       	rjmp	.+22     	; 0x1e3a <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	64 e0       	ldi	r22, 0x04	; 4
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	68 e0       	ldi	r22, 0x08	; 8
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;

	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <Led_Toggle+0x6>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	89 83       	std	Y+1, r24	; 0x01
	gpioPinToggle(PORTB_DATA, en_led_id);
    1e54:	e8 e3       	ldi	r30, 0x38	; 56
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	69 81       	ldd	r22, Y+1	; 0x01
    1e5c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <gpioPinToggle>
	switch(en_led_id)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3b 83       	std	Y+3, r19	; 0x03
    1e68:	2a 83       	std	Y+2, r18	; 0x02
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	91 05       	cpc	r25, r1
    1e72:	d1 f0       	breq	.+52     	; 0x1ea8 <Led_Toggle+0x62>
    1e74:	2a 81       	ldd	r18, Y+2	; 0x02
    1e76:	3b 81       	ldd	r19, Y+3	; 0x03
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <Led_Toggle+0x42>
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	61 f0       	breq	.+24     	; 0x1e9e <Led_Toggle+0x58>
    1e86:	1e c0       	rjmp	.+60     	; 0x1ec4 <Led_Toggle+0x7e>
    1e88:	2a 81       	ldd	r18, Y+2	; 0x02
    1e8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	81 f0       	breq	.+32     	; 0x1eb2 <Led_Toggle+0x6c>
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	83 30       	cpi	r24, 0x03	; 3
    1e98:	91 05       	cpc	r25, r1
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <Led_Toggle+0x76>
    1e9c:	13 c0       	rjmp	.+38     	; 0x1ec4 <Led_Toggle+0x7e>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <gpioPinToggle>
    1ea6:	0e c0       	rjmp	.+28     	; 0x1ec4 <Led_Toggle+0x7e>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <gpioPinToggle>
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <Led_Toggle+0x7e>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	64 e0       	ldi	r22, 0x04	; 4
    1eb6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <gpioPinToggle>
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <Led_Toggle+0x7e>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	68 e0       	ldi	r22, 0x08	; 8
    1ec0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <gpioPinToggle>
		break;

	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <main>:
#include "GPIO_REQ9.h"

#define F_CPU 8000000UL

int main()
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	//button_led();
	//sevensegments();
	trafficlight();
    1ed8:	0e 94 ef 09 	call	0x13de	; 0x13de <trafficlight>
	return 0;
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
}
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <pushButtonInit>:
#include "pushButton.h"
#include <util/delay.h>
void pushButtonInit(En_buttonId_t en_butotn_id)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <pushButtonInit+0x6>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	switch(en_butotn_id)
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	3b 83       	std	Y+3, r19	; 0x03
    1efc:	2a 83       	std	Y+2, r18	; 0x02
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	d9 f0       	breq	.+54     	; 0x1f3e <pushButtonInit+0x58>
    1f08:	2a 81       	ldd	r18, Y+2	; 0x02
    1f0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f0c:	22 30       	cpi	r18, 0x02	; 2
    1f0e:	31 05       	cpc	r19, r1
    1f10:	2c f4       	brge	.+10     	; 0x1f1c <pushButtonInit+0x36>
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <pushButtonInit+0x4c>
    1f1a:	22 c0       	rjmp	.+68     	; 0x1f60 <pushButtonInit+0x7a>
    1f1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	91 f0       	breq	.+36     	; 0x1f4a <pushButtonInit+0x64>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	83 30       	cpi	r24, 0x03	; 3
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	99 f0       	breq	.+38     	; 0x1f56 <pushButtonInit+0x70>
    1f30:	17 c0       	rjmp	.+46     	; 0x1f60 <pushButtonInit+0x7a>
	{
		case BTN_0:
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	60 e1       	ldi	r22, 0x10	; 16
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
    1f3c:	11 c0       	rjmp	.+34     	; 0x1f60 <pushButtonInit+0x7a>
			break;
		case BTN_1:
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	64 e0       	ldi	r22, 0x04	; 4
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
    1f48:	0b c0       	rjmp	.+22     	; 0x1f60 <pushButtonInit+0x7a>
			break;
		case BTN_2:
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <pushButtonInit+0x7a>
			break;
		case BTN_3:
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	68 e0       	ldi	r22, 0x08	; 8
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
			break;
	}
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	ec 97       	sbiw	r28, 0x3c	; 60
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	8a af       	std	Y+58, r24	; 0x3a
	unsigned char current_status=0;
    1f82:	19 ae       	std	Y+57, r1	; 0x39
	switch(en_butotn_id)
    1f84:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3c af       	std	Y+60, r19	; 0x3c
    1f8c:	2b af       	std	Y+59, r18	; 0x3b
    1f8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	91 05       	cpc	r25, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <pushButtonGetStatus+0x2e>
    1f98:	9d c0       	rjmp	.+314    	; 0x20d4 <pushButtonGetStatus+0x168>
    1f9a:	2b ad       	ldd	r18, Y+59	; 0x3b
    1f9c:	3c ad       	ldd	r19, Y+60	; 0x3c
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <pushButtonGetStatus+0x42>
    1fa4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fa6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	71 f0       	breq	.+28     	; 0x1fc8 <pushButtonGetStatus+0x5c>
    1fac:	23 c2       	rjmp	.+1094   	; 0x23f4 <pushButtonGetStatus+0x488>
    1fae:	2b ad       	ldd	r18, Y+59	; 0x3b
    1fb0:	3c ad       	ldd	r19, Y+60	; 0x3c
    1fb2:	22 30       	cpi	r18, 0x02	; 2
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <pushButtonGetStatus+0x4e>
    1fb8:	13 c1       	rjmp	.+550    	; 0x21e0 <pushButtonGetStatus+0x274>
    1fba:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fbc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <pushButtonGetStatus+0x5a>
    1fc4:	93 c1       	rjmp	.+806    	; 0x22ec <pushButtonGetStatus+0x380>
    1fc6:	16 c2       	rjmp	.+1068   	; 0x23f4 <pushButtonGetStatus+0x488>
	{
		case BTN_0:
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	60 e1       	ldi	r22, 0x10	; 16
    1fcc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <pushButtonGetStatus+0x6a>
    1fd4:	0f c2       	rjmp	.+1054   	; 0x23f4 <pushButtonGetStatus+0x488>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 ef       	ldi	r26, 0xF0	; 240
    1fdc:	b1 e4       	ldi	r27, 0x41	; 65
    1fde:	8d ab       	std	Y+53, r24	; 0x35
    1fe0:	9e ab       	std	Y+54, r25	; 0x36
    1fe2:	af ab       	std	Y+55, r26	; 0x37
    1fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	53 e4       	ldi	r21, 0x43	; 67
    1ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	89 ab       	std	Y+49, r24	; 0x31
    2000:	9a ab       	std	Y+50, r25	; 0x32
    2002:	ab ab       	std	Y+51, r26	; 0x33
    2004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <pushButtonGetStatus+0xbc>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <pushButtonGetStatus+0x13a>
	else if (__tmp > 65535)
    2028:	69 a9       	ldd	r22, Y+49	; 0x31
    202a:	7a a9       	ldd	r23, Y+50	; 0x32
    202c:	8b a9       	ldd	r24, Y+51	; 0x33
    202e:	9c a9       	ldd	r25, Y+52	; 0x34
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <pushButtonGetStatus+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	6d a9       	ldd	r22, Y+53	; 0x35
    2042:	7e a9       	ldd	r23, Y+54	; 0x36
    2044:	8f a9       	ldd	r24, Y+55	; 0x37
    2046:	98 ad       	ldd	r25, Y+56	; 0x38
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	98 ab       	std	Y+48, r25	; 0x30
    2066:	8f a7       	std	Y+47, r24	; 0x2f
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <pushButtonGetStatus+0x11c>
    206a:	89 e1       	ldi	r24, 0x19	; 25
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
    2072:	8d a5       	ldd	r24, Y+45	; 0x2d
    2074:	9e a5       	ldd	r25, Y+46	; 0x2e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <pushButtonGetStatus+0x10a>
    207a:	9e a7       	std	Y+46, r25	; 0x2e
    207c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	98 ab       	std	Y+48, r25	; 0x30
    2086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8f a5       	ldd	r24, Y+47	; 0x2f
    208a:	98 a9       	ldd	r25, Y+48	; 0x30
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <pushButtonGetStatus+0xfe>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <pushButtonGetStatus+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	69 a9       	ldd	r22, Y+49	; 0x31
    2094:	7a a9       	ldd	r23, Y+50	; 0x32
    2096:	8b a9       	ldd	r24, Y+51	; 0x33
    2098:	9c a9       	ldd	r25, Y+52	; 0x34
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	98 ab       	std	Y+48, r25	; 0x30
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <pushButtonGetStatus+0x146>
    20b6:	9c a7       	std	Y+44, r25	; 0x2c
    20b8:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(30);
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	60 e1       	ldi	r22, 0x10	; 16
    20be:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    20c2:	88 23       	and	r24, r24
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <pushButtonGetStatus+0x15c>
    20c6:	96 c1       	rjmp	.+812    	; 0x23f4 <pushButtonGetStatus+0x488>
				{
					current_status=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	60 e1       	ldi	r22, 0x10	; 16
    20cc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    20d0:	89 af       	std	Y+57, r24	; 0x39
    20d2:	90 c1       	rjmp	.+800    	; 0x23f4 <pushButtonGetStatus+0x488>
				}
			}
			break;

		case BTN_1:
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	64 e0       	ldi	r22, 0x04	; 4
    20d8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    20dc:	88 23       	and	r24, r24
    20de:	09 f4       	brne	.+2      	; 0x20e2 <pushButtonGetStatus+0x176>
    20e0:	89 c1       	rjmp	.+786    	; 0x23f4 <pushButtonGetStatus+0x488>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 ef       	ldi	r26, 0xF0	; 240
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	8f a3       	std	Y+39, r24	; 0x27
    20ec:	98 a7       	std	Y+40, r25	; 0x28
    20ee:	a9 a7       	std	Y+41, r26	; 0x29
    20f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6f a1       	ldd	r22, Y+39	; 0x27
    20f4:	78 a5       	ldd	r23, Y+40	; 0x28
    20f6:	89 a5       	ldd	r24, Y+41	; 0x29
    20f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	53 e4       	ldi	r21, 0x43	; 67
    2102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8b a3       	std	Y+35, r24	; 0x23
    210c:	9c a3       	std	Y+36, r25	; 0x24
    210e:	ad a3       	std	Y+37, r26	; 0x25
    2110:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2112:	6b a1       	ldd	r22, Y+35	; 0x23
    2114:	7c a1       	ldd	r23, Y+36	; 0x24
    2116:	8d a1       	ldd	r24, Y+37	; 0x25
    2118:	9e a1       	ldd	r25, Y+38	; 0x26
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <pushButtonGetStatus+0x1c8>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9a a3       	std	Y+34, r25	; 0x22
    2130:	89 a3       	std	Y+33, r24	; 0x21
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <pushButtonGetStatus+0x246>
	else if (__tmp > 65535)
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <pushButtonGetStatus+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6f a1       	ldd	r22, Y+39	; 0x27
    214e:	78 a5       	ldd	r23, Y+40	; 0x28
    2150:	89 a5       	ldd	r24, Y+41	; 0x29
    2152:	9a a5       	ldd	r25, Y+42	; 0x2a
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <pushButtonGetStatus+0x228>
    2176:	89 e1       	ldi	r24, 0x19	; 25
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 a3       	std	Y+32, r25	; 0x20
    217c:	8f 8f       	std	Y+31, r24	; 0x1f
    217e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2180:	98 a1       	ldd	r25, Y+32	; 0x20
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <pushButtonGetStatus+0x216>
    2186:	98 a3       	std	Y+32, r25	; 0x20
    2188:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9a a3       	std	Y+34, r25	; 0x22
    2192:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	89 a1       	ldd	r24, Y+33	; 0x21
    2196:	9a a1       	ldd	r25, Y+34	; 0x22
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <pushButtonGetStatus+0x20a>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <pushButtonGetStatus+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6b a1       	ldd	r22, Y+35	; 0x23
    21a0:	7c a1       	ldd	r23, Y+36	; 0x24
    21a2:	8d a1       	ldd	r24, Y+37	; 0x25
    21a4:	9e a1       	ldd	r25, Y+38	; 0x26
    21a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9a a3       	std	Y+34, r25	; 0x22
    21b0:	89 a3       	std	Y+33, r24	; 0x21
    21b2:	89 a1       	ldd	r24, Y+33	; 0x21
    21b4:	9a a1       	ldd	r25, Y+34	; 0x22
    21b6:	9e 8f       	std	Y+30, r25	; 0x1e
    21b8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <pushButtonGetStatus+0x252>
    21c2:	9e 8f       	std	Y+30, r25	; 0x1e
    21c4:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	64 e0       	ldi	r22, 0x04	; 4
    21ca:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <pushButtonGetStatus+0x268>
    21d2:	10 c1       	rjmp	.+544    	; 0x23f4 <pushButtonGetStatus+0x488>
				{
					current_status=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	64 e0       	ldi	r22, 0x04	; 4
    21d8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    21dc:	89 af       	std	Y+57, r24	; 0x39
    21de:	0a c1       	rjmp	.+532    	; 0x23f4 <pushButtonGetStatus+0x488>
				}
			}
			break;

		case BTN_2:
			if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <pushButtonGetStatus+0x282>
    21ec:	03 c1       	rjmp	.+518    	; 0x23f4 <pushButtonGetStatus+0x488>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 ef       	ldi	r26, 0xF0	; 240
    21f4:	b1 e4       	ldi	r27, 0x41	; 65
    21f6:	89 8f       	std	Y+25, r24	; 0x19
    21f8:	9a 8f       	std	Y+26, r25	; 0x1a
    21fa:	ab 8f       	std	Y+27, r26	; 0x1b
    21fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	53 e4       	ldi	r21, 0x43	; 67
    220e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8d 8b       	std	Y+21, r24	; 0x15
    2218:	9e 8b       	std	Y+22, r25	; 0x16
    221a:	af 8b       	std	Y+23, r26	; 0x17
    221c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    221e:	6d 89       	ldd	r22, Y+21	; 0x15
    2220:	7e 89       	ldd	r23, Y+22	; 0x16
    2222:	8f 89       	ldd	r24, Y+23	; 0x17
    2224:	98 8d       	ldd	r25, Y+24	; 0x18
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <pushButtonGetStatus+0x2d4>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	3f c0       	rjmp	.+126    	; 0x22be <pushButtonGetStatus+0x352>
	else if (__tmp > 65535)
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <pushButtonGetStatus+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <pushButtonGetStatus+0x334>
    2282:	89 e1       	ldi	r24, 0x19	; 25
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a 8b       	std	Y+18, r25	; 0x12
    2288:	89 8b       	std	Y+17, r24	; 0x11
    228a:	89 89       	ldd	r24, Y+17	; 0x11
    228c:	9a 89       	ldd	r25, Y+18	; 0x12
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <pushButtonGetStatus+0x322>
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <pushButtonGetStatus+0x316>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <pushButtonGetStatus+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	98 8b       	std	Y+16, r25	; 0x10
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
    22c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c8:	98 89       	ldd	r25, Y+16	; 0x10
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <pushButtonGetStatus+0x35e>
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    22da:	88 23       	and	r24, r24
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <pushButtonGetStatus+0x374>
    22de:	8a c0       	rjmp	.+276    	; 0x23f4 <pushButtonGetStatus+0x488>
				{
					current_status=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	64 e0       	ldi	r22, 0x04	; 4
    22e4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    22e8:	89 af       	std	Y+57, r24	; 0x39
    22ea:	84 c0       	rjmp	.+264    	; 0x23f4 <pushButtonGetStatus+0x488>
				}
			}
			break;

		case BTN_3:
			if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	68 e0       	ldi	r22, 0x08	; 8
    22f0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    22f4:	88 23       	and	r24, r24
    22f6:	09 f4       	brne	.+2      	; 0x22fa <pushButtonGetStatus+0x38e>
    22f8:	7d c0       	rjmp	.+250    	; 0x23f4 <pushButtonGetStatus+0x488>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 ef       	ldi	r26, 0xF0	; 240
    2300:	b1 e4       	ldi	r27, 0x41	; 65
    2302:	8b 87       	std	Y+11, r24	; 0x0b
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	ad 87       	std	Y+13, r26	; 0x0d
    2308:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6b 85       	ldd	r22, Y+11	; 0x0b
    230c:	7c 85       	ldd	r23, Y+12	; 0x0c
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a e7       	ldi	r20, 0x7A	; 122
    2318:	53 e4       	ldi	r21, 0x43	; 67
    231a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	98 87       	std	Y+8, r25	; 0x08
    2326:	a9 87       	std	Y+9, r26	; 0x09
    2328:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <pushButtonGetStatus+0x3e0>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <pushButtonGetStatus+0x45e>
	else if (__tmp > 65535)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <pushButtonGetStatus+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <pushButtonGetStatus+0x440>
    238e:	89 e1       	ldi	r24, 0x19	; 25
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <pushButtonGetStatus+0x42e>
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <pushButtonGetStatus+0x422>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <pushButtonGetStatus+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <pushButtonGetStatus+0x46a>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	68 e0       	ldi	r22, 0x08	; 8
    23e2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    23e6:	88 23       	and	r24, r24
    23e8:	29 f0       	breq	.+10     	; 0x23f4 <pushButtonGetStatus+0x488>
				{
					current_status=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	68 e0       	ldi	r22, 0x08	; 8
    23ee:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <gpioPinRead>
    23f2:	89 af       	std	Y+57, r24	; 0x39
				}
			}
			break;

	}
	return current_status;
    23f4:	89 ad       	ldd	r24, Y+57	; 0x39
}
    23f6:	ec 96       	adiw	r28, 0x3c	; 60
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <sevenSegInit>:
#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <sevenSegInit+0x6>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	89 83       	std	Y+1, r24	; 0x01
	switch (a_segment_id)
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	3b 83       	std	Y+3, r19	; 0x03
    241e:	2a 83       	std	Y+2, r18	; 0x02
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	31 f0       	breq	.+12     	; 0x2434 <sevenSegInit+0x2c>
    2428:	2a 81       	ldd	r18, Y+2	; 0x02
    242a:	3b 81       	ldd	r19, Y+3	; 0x03
    242c:	21 30       	cpi	r18, 0x01	; 1
    242e:	31 05       	cpc	r19, r1
    2430:	b1 f0       	breq	.+44     	; 0x245e <sevenSegInit+0x56>
    2432:	29 c0       	rjmp	.+82     	; 0x2486 <sevenSegInit+0x7e>
	{
	case SEG_0:
		gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	6f e0       	ldi	r22, 0x0F	; 15
    2438:	4f ef       	ldi	r20, 0xFF	; 255
    243a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	6f e0       	ldi	r22, 0x0F	; 15
    2442:	4f e0       	ldi	r20, 0x0F	; 15
    2444:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT,OUTPUT);
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	64 e0       	ldi	r22, 0x04	; 4
    244c:	4f ef       	ldi	r20, 0xFF	; 255
    244e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	64 e0       	ldi	r22, 0x04	; 4
    2456:	44 e0       	ldi	r20, 0x04	; 4
    2458:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <sevenSegInit+0x7e>
		break;
	case SEG_1:
		gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS,OUTPUT);
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	6f e0       	ldi	r22, 0x0F	; 15
    2462:	4f ef       	ldi	r20, 0xFF	; 255
    2464:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	6f e0       	ldi	r22, 0x0F	; 15
    246c:	4f e0       	ldi	r20, 0x0F	; 15
    246e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT,OUTPUT);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	68 e0       	ldi	r22, 0x08	; 8
    2476:	4f ef       	ldi	r20, 0xFF	; 255
    2478:	0e 94 a0 0c 	call	0x1940	; 0x1940 <gpioPinDirection>
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	68 e0       	ldi	r22, 0x08	; 8
    2480:	48 e0       	ldi	r20, 0x08	; 8
    2482:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;
	}
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <sevenSegEnable>:


void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <sevenSegEnable+0x6>
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	3b 83       	std	Y+3, r19	; 0x03
    24a8:	2a 83       	std	Y+2, r18	; 0x02
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	31 f0       	breq	.+12     	; 0x24be <sevenSegEnable+0x2c>
    24b2:	2a 81       	ldd	r18, Y+2	; 0x02
    24b4:	3b 81       	ldd	r19, Y+3	; 0x03
    24b6:	21 30       	cpi	r18, 0x01	; 1
    24b8:	31 05       	cpc	r19, r1
    24ba:	39 f0       	breq	.+14     	; 0x24ca <sevenSegEnable+0x38>
    24bc:	0b c0       	rjmp	.+22     	; 0x24d4 <sevenSegEnable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	64 e0       	ldi	r22, 0x04	; 4
    24c2:	44 e0       	ldi	r20, 0x04	; 4
    24c4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <sevenSegEnable+0x42>
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	68 e0       	ldi	r22, 0x08	; 8
    24ce:	48 e0       	ldi	r20, 0x08	; 8
    24d0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;
	}
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <sevenSegDisable+0x6>
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	3b 83       	std	Y+3, r19	; 0x03
    24f6:	2a 83       	std	Y+2, r18	; 0x02
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	31 f0       	breq	.+12     	; 0x250c <sevenSegDisable+0x2c>
    2500:	2a 81       	ldd	r18, Y+2	; 0x02
    2502:	3b 81       	ldd	r19, Y+3	; 0x03
    2504:	21 30       	cpi	r18, 0x01	; 1
    2506:	31 05       	cpc	r19, r1
    2508:	39 f0       	breq	.+14     	; 0x2518 <sevenSegDisable+0x38>
    250a:	0b c0       	rjmp	.+22     	; 0x2522 <sevenSegDisable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, LOW);
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	64 e0       	ldi	r22, 0x04	; 4
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    2516:	05 c0       	rjmp	.+10     	; 0x2522 <sevenSegDisable+0x42>
		/*here I send LOW as a value because it will be ORed by the way
		 * with the port value in "gpioPinWrite" function
		 */
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, LOW);
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	68 e0       	ldi	r22, 0x08	; 8
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;
	}
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <sevenSegWrite+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <sevenSegWrite+0x8>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	6a 83       	std	Y+2, r22	; 0x02
	switch (en_segment_id)
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	3c 83       	std	Y+4, r19	; 0x04
    2546:	2b 83       	std	Y+3, r18	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	31 f0       	breq	.+12     	; 0x255c <sevenSegWrite+0x2e>
    2550:	2b 81       	ldd	r18, Y+3	; 0x03
    2552:	3c 81       	ldd	r19, Y+4	; 0x04
    2554:	21 30       	cpi	r18, 0x01	; 1
    2556:	31 05       	cpc	r19, r1
    2558:	61 f0       	breq	.+24     	; 0x2572 <sevenSegWrite+0x44>
    255a:	15 c0       	rjmp	.+42     	; 0x2586 <sevenSegWrite+0x58>
	{
	case SEG_0:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	6f e0       	ldi	r22, 0x0F	; 15
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	6f e0       	ldi	r22, 0x0F	; 15
    256a:	4a 81       	ldd	r20, Y+2	; 0x02
    256c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
    2570:	0a c0       	rjmp	.+20     	; 0x2586 <sevenSegWrite+0x58>
		break;
	case SEG_1:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	6f e0       	ldi	r22, 0x0F	; 15
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	6f e0       	ldi	r22, 0x0F	; 15
    2580:	4a 81       	ldd	r20, Y+2	; 0x02
    2582:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <gpioPinWrite>
		break;
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <__prologue_saves__>:
    2594:	2f 92       	push	r2
    2596:	3f 92       	push	r3
    2598:	4f 92       	push	r4
    259a:	5f 92       	push	r5
    259c:	6f 92       	push	r6
    259e:	7f 92       	push	r7
    25a0:	8f 92       	push	r8
    25a2:	9f 92       	push	r9
    25a4:	af 92       	push	r10
    25a6:	bf 92       	push	r11
    25a8:	cf 92       	push	r12
    25aa:	df 92       	push	r13
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	ca 1b       	sub	r28, r26
    25be:	db 0b       	sbc	r29, r27
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	09 94       	ijmp

000025cc <__epilogue_restores__>:
    25cc:	2a 88       	ldd	r2, Y+18	; 0x12
    25ce:	39 88       	ldd	r3, Y+17	; 0x11
    25d0:	48 88       	ldd	r4, Y+16	; 0x10
    25d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25da:	9b 84       	ldd	r9, Y+11	; 0x0b
    25dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    25de:	b9 84       	ldd	r11, Y+9	; 0x09
    25e0:	c8 84       	ldd	r12, Y+8	; 0x08
    25e2:	df 80       	ldd	r13, Y+7	; 0x07
    25e4:	ee 80       	ldd	r14, Y+6	; 0x06
    25e6:	fd 80       	ldd	r15, Y+5	; 0x05
    25e8:	0c 81       	ldd	r16, Y+4	; 0x04
    25ea:	1b 81       	ldd	r17, Y+3	; 0x03
    25ec:	aa 81       	ldd	r26, Y+2	; 0x02
    25ee:	b9 81       	ldd	r27, Y+1	; 0x01
    25f0:	ce 0f       	add	r28, r30
    25f2:	d1 1d       	adc	r29, r1
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	ed 01       	movw	r28, r26
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
